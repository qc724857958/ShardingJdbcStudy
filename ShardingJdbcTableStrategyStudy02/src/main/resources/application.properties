server.port=8081

spring.application.name=ShardingJdbcTableStrategyStudy02

# Logger Config
logging.level.com.shone.shardingjdbcstudy: debug

#==================================shardingsphere 配置开始========数据分片======================================
spring.shardingsphere.datasource.names=ds0
# 配置数据源
spring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://localhost:3306/sharding_jdbc_db1?useUnicode=true&characterEncoding=UTF-8
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=root

# #shardingjdbc解析上下文和改写后的SQL
spring.shardingsphere.props.sql.show=true

###########################################################
#
#                       默认分片规则配置--字典表使用
#
###########################################################
#未配置分片规则的表将通过默认数据源定位-适用于单库单表，该表无需配置分片规则
sharding.jdbc.config.sharding.defaultDataSourceName=ds0

#t_order表
#数据节点
#主键
spring.shardingsphere.sharding.tables.t_order.key-generator.column=order_id
#主键生成策略，用雪花算法
spring.shardingsphere.sharding.tables.t_order.key-generator.type=SNOWFLAKE

#====================分表策略,根据order_id最后一位奇数偶数分成两个表   开始=========================================
spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=ds0.t_order$->{0..1}
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column=order_id
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression=t_order$->{order_id % 2}

#spring.shardingsphere.sharding.tables.t_order_item.actual-data-nodes=ds0.t_order_item$->{0..1}
#spring.shardingsphere.sharding.tables.t_order_item.table-strategy.inline.sharding-column=order_id
#spring.shardingsphere.sharding.tables.t_order_item.table-strategy.inline.algorithm-expression=t_order_item$->{order_id % 2}
#spring.shardingsphere.sharding.tables.t_order_item.key-generator.column=order_item_id

# 主键生成策略，用雪花算法。不配置这个会导致 Type is required 异常
#spring.shardingsphere.sharding.tables.t_order_item.key-generator.type=SNOWFLAKE
#spring.shardingsphere.sharding.binding-tables=t_order,t_order_item
#====================分表策略,根据order_id最后一位奇数偶数分成两个表   开始=========================================


#====================分表策略,根据年份月份分表   开始=========================================
#实际的数据分支，查询时根据这个进行查询
#spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=ds0.t_order_${['201910','201911']}
# 根据order_id字段进行分片
#spring.shardingsphere.sharding.tables.t_order.table-strategy.standard.sharding-column=order_id
# 精确分片算法。按单月分表,采用标准的分片策略，指向插入数据时的处理,自己实现的逻辑，每次插入和根据分片键查询数据的时候都会被调用
#spring.shardingsphere.sharding.tables.t_order.table-strategy.standard.precise-algorithm-class-name=com.shone.shardingjdbctablestrategy.config.TimeShardingTableAlgorithm
# 范围分片算法。根据分片键使用between and 的时候才会走，其他方式查询则没用
#spring.shardingsphere.sharding.tables.t_order.table-strategy.standard.range-algorithm-class-name=com.shone.shardingjdbctablestrategy.config.TimeRangeShardingAlgorithm
#====================分表策略,根据年份月份分表   结束=========================================




#==================================shardingsphere 配置结束==============================================

spring.main.allow-bean-definition-overriding=true


